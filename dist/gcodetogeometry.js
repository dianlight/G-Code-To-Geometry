!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports.gcodetogeometry=I():g.gcodetogeometry=I()}(self,(function(){return(()=>{var __webpack_modules__={624:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "parse": () => (/* binding */ parse)\n/* harmony export */ });\n/*jslint todo: true, browser: true, continue: true, white: true*/\n\n// Written by Alex Canales for ShopBotTools, Inc.\n\nvar util = __webpack_require__(891);\nvar StraightLine = __webpack_require__(864)/* .StraightLine */ ._;\nvar CurvedLine = __webpack_require__(864)/* .CurvedLine */ .Q;\nvar GParser = __webpack_require__(477)/* .GParser */ .o;\n\n/**\n * Parses the GCode into a series of lines and curves and checks if errors.\n *\n * @param {string} code - The GCode.\n * @returns {ParsedGCode} The parsed GCode.\n */\nfunction parse(code) {\n    "use strict";\n\n    var unitIsSet = false;\n    var setInInch = true;\n\n    /**\n     * Removes the comments and spaces.\n     * @param  {string}  command  The command to parse\n     * @return  {string}  The command without the commands and spaces.\n     */\n    function removeCommentsAndSpaces(command) {\n        var s = command.split(\'(\')[0].split(\';\')[0]; //No need to use regex\n        return s.split(/\\s/).join(\'\').trim();\n    }\n\n    /**\n     * Parses the result of GParser.parse.\n     * @param  {array}  Result of GParser.parse\n     * @return  {array}  Array of object.\n     */\n    function parseParsedGCode(parsed) {\n        var obj = {};\n        var i = 0;\n        var letter = "",\n            number = "";\n        var tab = [];\n        var emptyObj = true;\n\n        for (i = 0; i < parsed.words.length; i++) {\n            letter = parsed.words[i][0];\n            number = parsed.words[i][1];\n            if (letter === "G" || letter === "M") {\n                //Make sure multiple commands in one line are interpreted as\n                //multiple commands:\n                if (emptyObj === false) {\n                    tab.push(obj);\n                    obj = {};\n                }\n                obj.type = letter + number;\n                emptyObj = false;\n            } else {\n                obj[letter.toLowerCase()] = parseFloat(number, 10);\n            }\n        }\n        tab.push(obj);\n        return tab;\n    }\n\n    /**\n     * Checks if there is a wrong parameter.\n     * @param  {array}  acceptedParameters  Array of accepted parameters (should\n     *                                      not include the type of the command)\n     * @param  {array}  parameters          The current given parameters\n     * @return  {bool}  True if there is a wrong parameter.\n     */\n    function checkWrongParameter(acceptedParameters, parameters) {\n        var i = 0,\n            j = 0;\n        var accepted = true;\n\n        for (j = parameters.length - 1; j >= 0; j--) {\n            for (i = acceptedParameters.length - 1; i >= 0; i--) {\n                accepted = false;\n                if (parameters[j].toUpperCase() === acceptedParameters[i].toUpperCase()) {\n                    accepted = true;\n                    acceptedParameters.splice(i, 1);\n                    break;\n                }\n            }\n            if (accepted === false) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks and modifies the total size.\n     * @param  {object}  totalSize  The the whole operation size (modified)\n     * @param  {object}  size       The added operation size\n     */\n    function checkTotalSize(totalSize, size) {\n        var keys = ["x", "y", "z"];\n        var i = 0;\n        for (i = keys.length - 1; i >= 0; i--) {\n            if (totalSize.min[keys[i]] > size.min[keys[i]]) {\n                totalSize.min[keys[i]] = size.min[keys[i]];\n            }\n            if (totalSize.max[keys[i]] < size.max[keys[i]]) {\n                totalSize.max[keys[i]] = size.max[keys[i]];\n            }\n        }\n    }\n\n    /**\n     * Creates an error object.\n     *\n     * @param {number} line The line number.\n     * @param {string} message The message.\n     * @param {boolean} isSkipped If the command is skipped.\n     * @return {Error} The error object.\n     */\n    function createError(line, message, isSkipped) {\n        return { line: line, message: message, isSkipped: isSkipped };\n    }\n\n    /**\n     * Checks if there is an error due to the feed rate configuration.\n     * @param  {object}  command    The command (the feed rate can be changed)\n     * @param  {object}  errorList  The error list\n     * @param  {number}  line       The line number\n     * @param  {object}  settings   The modularity settings\n     * @return {bool}  True if the command is skipped (error), else false if the\n     *                 feedrate is correct or emits only a warning\n     */\n    function checkErrorFeedrate(command, errorList, line, settings) {\n        var c = command;\n        var consideredFeedrate = (c.f === undefined) ? settings.feedrate : c.f;\n\n        if (c.type !== undefined && c.type !== "G1" && c.type !== "G2" &&\n            c.type !== "G3") {\n            return false;\n        }\n\n        if (consideredFeedrate > 0) {\n            return false;\n        }\n\n        if (consideredFeedrate < 0) {\n            errorList.push(createError(\n                line,\n                "(warning) Cannot use a negative feed rate " +\n                "(the absolute value is used).",\n                false\n            ));\n            c.f = Math.abs(consideredFeedrate);\n            return false;\n        }\n\n        errorList.push(createError(\n            line, "(error) Cannot use a null feed rate (skipped).", true\n        ));\n        settings.feedrate = 0;\n\n        return true;\n    }\n\n    /**\n     * Sets the command type if not set and if a previous move command was set.\n     * @param  {object}  parsedCommand        The command (is modified)\n     * @param  {string}  previousMoveCommand  The type of the previous move\n     *                                        command\n     */\n    function setGoodType(parsedCommand, previousMoveCommand) {\n        if (parsedCommand.type !== undefined) {\n            return;\n        }\n        if (previousMoveCommand !== "") {\n            parsedCommand.type = previousMoveCommand;\n        }\n    }\n\n    /**\n     * Finds the next position according to the x, y and z contained or not in\n     * the command parameters.\n     *\n     * @param {object} start The 3D start point.\n     * @param {object} parameters The command parameters.\n     * @param {boolean} relative If the point in the parameters is a relative\n     * point.\n     * @param {boolean} inMm If the values are in inches.\n     * @return {object} The point.\n     */\n    function findPosition(start, parameters, relative, inMm) {\n        var pos = { x: start.x, y: start.y, z: start.z };\n        var d = (inMm === false) ? 1 : util.MILLIMETER_TO_INCH;\n        if (relative === true) {\n            if (parameters.x !== undefined) { pos.x += parameters.x * d; }\n            if (parameters.y !== undefined) { pos.y += parameters.y * d; }\n            if (parameters.z !== undefined) { pos.z += parameters.z * d; }\n        } else {\n            if (parameters.x !== undefined) { pos.x = parameters.x * d; }\n            if (parameters.y !== undefined) { pos.y = parameters.y * d; }\n            if (parameters.z !== undefined) { pos.z = parameters.z * d; }\n        }\n\n        return pos;\n    }\n\n    /**\n     * Checks a G0 command.\n     * @param  {object}  command    The command\n     * @param  {array}   errorList  The error list\n     * @param  {number}  line       The line number\n     * @return  {bool}   Returns true if the command is done, false if skipped\n     */\n    function checkG0(command, errorList, line) {\n        var acceptedParameters = ["X", "Y", "Z"];\n        var parameters = Object.keys(command);\n        parameters.splice(parameters.indexOf("type"), 1);\n\n        if (checkWrongParameter(acceptedParameters, parameters) === true) {\n            errorList.push(createError(\n                line, "(warning) Some parameters are wrong.", false\n            ));\n        }\n        return true;\n    }\n\n    /**\n     * Checks a G1 command.\n     * @param  {object}  command           The command\n     * @param  {array}   errorList         The error list\n     * @param  {number}  line              The line number\n     * @param  {number}  previousFeedrate  The previous feedrate\n     * @return  {bool}   Returns true if the command is done, false if skipped\n     */\n    function checkG1(command, errorList, line, previousFeedrate) {\n        var acceptedParameters = ["X", "Y", "Z", "F"];\n        var parameters = Object.keys(command);\n        parameters.splice(parameters.indexOf("type"), 1);\n\n        if (checkWrongParameter(acceptedParameters, parameters) === true) {\n            errorList.push(createError(\n                line, "(warning) Some parameters are wrong.", false\n            ));\n        }\n\n        return !checkErrorFeedrate(command, errorList, line, previousFeedrate);\n    }\n\n    /**\n     * Checks a G2 or G3 command.\n     * @param  {object}  command           The command\n     * @param  {array}   errorList         The error list\n     * @param  {number}  line              The line number\n     * @param  {number}  previousFeedrate  The previous feedrate\n     * @return  {bool}   Returns true if the command is done, false if skipped\n     */\n    function checkG2G3(command, errorList, line, previousFeedrate) {\n        var acceptedParameters = ["X", "Y", "Z", "F", "I", "J", "K", "R"];\n        var parameters = Object.keys(command);\n        parameters.splice(parameters.indexOf("type"), 1);\n\n        if (checkWrongParameter(acceptedParameters, parameters) === true) {\n            errorList.push(createError(\n                line, "(warning) Some parameters are wrong.", false\n            ));\n        }\n\n        if (command.r === undefined && command.i === undefined &&\n            command.j === undefined && command.k === undefined) {\n            errorList.push(createError(\n                line, "(error) No parameter R, I, J or K.", true\n            ));\n            return false;\n        }\n\n        if (command.r !== undefined && (command.i !== undefined ||\n                command.j !== undefined || command.k !== undefined)) {\n            errorList.push(createError(\n                line,\n                "(error) Cannot use R and I, J or K at the same time.",\n                true\n            ));\n            return false;\n        }\n\n        return !checkErrorFeedrate(command, errorList, line, previousFeedrate);\n    }\n\n    /**\n     * Manages a 60 or G1 command.\n     * @param  {object}  command    The command\n     * @param  {object}  settings   The modularity settings\n     * @param  {object}  totalSize  The the whole operation size (modified)\n     * @param  {array}   lines      The array containing the lines\n     * @param  {number}  lineNumber The line number\n     * @param  {object}  errorList  The error list\n     */\n    function manageG0G1(command, settings, lineNumber, lines, totalSize) {\n        var nextPosition = findPosition(settings.position, command,\n            settings.relative, settings.inMm);\n        var line = new StraightLine(lineNumber,\n            settings.position, nextPosition, command, settings);\n        settings.previousMoveCommand = command.type;\n        checkTotalSize(totalSize, line.getSize());\n        lines.push(line.returnLine());\n        settings.position = util.copyObject(line.end);\n        if (command.f !== undefined) {\n            settings.feedrate = command.f;\n        }\n    }\n\n    /**\n     * Manages a G2 or G3 command.\n     * @param  {object}  command    The command\n     * @param  {object}  settings   The modularity settings\n     * @param  {number}  lineNumber The line number\n     * @param  {array}   lines      The array containing the lines\n     * @param  {object}  totalSize  The the whole operation size (modified)\n     * @param  {object}  errorList  The error list\n     */\n    function manageG2G3(command, settings, lineNumber, lines, totalSize,\n        errorList) {\n        var nextPosition = findPosition(settings.position, command,\n            settings.relative, settings.inMm);\n        var line = new CurvedLine(lineNumber, settings.position,\n            nextPosition, command, settings);\n        if (line.center !== false) {\n            var temp = line.returnLine();\n            if (temp === false) {\n                errorList.push(createError(\n                    lineNumber, "(error) Impossible to create arc.", true\n                ));\n                return;\n            }\n            settings.feedrate = line.feedrate;\n            settings.previousMoveCommand = command.type;\n            checkTotalSize(totalSize, line.getSize());\n            lines.push(temp);\n            settings.position = util.copyObject(line.end);\n        } else {\n            errorList.push(createError(\n                lineNumber,\n                "(error) Physically impossible to do with those values.",\n                true\n            ));\n        }\n    }\n\n    /**\n     * Manages a command (check it, create geometrical line, change setting...).\n     * @param  {object}  command    The command\n     * @param  {object}  settings   The modularity settings\n     * @param  {number}  lineNumber The line number\n     * @param  {array}   lines      The array containing the lines\n     * @param  {object}  totalSize  The the whole operation size (modified)\n     * @param  {object}  errorList  The error list\n     * @return {bool}  Returns true if have to continue, else false\n     */\n    function manageCommand(command, settings, lineNumber, lines, totalSize,\n        errorList) {\n        //Empty line\n        if (command.type === undefined && Object.keys(command).length === 0) {\n            return true;\n        }\n\n        setGoodType(command, settings.previousMoveCommand);\n\n        if (command.type === undefined) {\n            if (command.f !== undefined) {\n                checkErrorFeedrate(command, errorList, lineNumber,\n                    settings.feedrate);\n                settings.feedrate = command.f;\n            }\n        } else if (command.type === "G0" &&\n            checkG0(command, errorList, lineNumber) === true) {\n            manageG0G1(command, settings, lineNumber, lines, totalSize);\n        } else if (command.type === "G1" &&\n            checkG1(command, errorList, lineNumber, settings) === true) {\n            manageG0G1(command, settings, lineNumber, lines, totalSize);\n        } else if ((command.type === "G2" || command.type === "G3") &&\n            checkG2G3(command, errorList, lineNumber, settings) === true) {\n            manageG2G3(command, settings, lineNumber, lines, totalSize, errorList);\n        } else if (command.type === "G17") {\n            settings.crossAxe = "z";\n        } else if (command.type === "G18") {\n            settings.crossAxe = "y";\n        } else if (command.type === "G19") {\n            settings.crossAxe = "x";\n        } else if (command.type === "G20") {\n            settings.inMm = false;\n            if (unitIsSet === false) {\n                setInInch = true;\n                unitIsSet = true;\n            }\n        } else if (command.type === "G21") {\n            settings.inMm = true;\n            if (unitIsSet === false) {\n                setInInch = false;\n                unitIsSet = true;\n            }\n        } else if (command.type === "G90") {\n            settings.relative = false;\n        } else if (command.type === "G91") {\n            settings.relative = true;\n        } else if (command.type === "M2") {\n            return false;\n        }\n\n        return true;\n    }\n\n    var totalSize = {\n        min: { x: 0, y: 0, z: 0 },\n        max: { x: 0, y: 0, z: 0 }\n    };\n    var i = 0,\n        j = 0;\n    var tabRes = [];\n    var parsing = true;\n    var lines = [];\n    var errorList = [];\n\n    var settings = {\n        feedrate: 0,\n        previousMoveCommand: "",\n        crossAxe: "z",\n        inMm: false,\n        relative: false,\n        position: { x: 0, y: 0, z: 0 }\n    };\n\n    if (typeof code !== "string" || code === "") {\n        return {\n            gcode: [],\n            lines: [],\n            size: totalSize,\n            displayInInch: setInInch,\n            errorList: [{ line: 0, message: "(error) No command." }]\n        };\n    }\n    var gcode = code.split(\'\\n\');\n\n    i = 0;\n    while (i < gcode.length && parsing === true) {\n        //Sorry for not being really readable :\'(\n        tabRes = parseParsedGCode(\n            GParser.parse(\n                removeCommentsAndSpaces(gcode[i]).toUpperCase()\n            )\n        );\n\n        j = 0;\n        while (j < tabRes.length && parsing === true) {\n            parsing = manageCommand(tabRes[j], settings, i + 1, lines, totalSize,\n                errorList);\n            j++;\n        }\n        i++;\n    }\n\n    if (i < gcode.length) {\n        errorList.push(createError(\n            i + 1, "(warning) The next code is not executed.", false\n        ));\n    }\n\n    return {\n        gcode: gcode,\n        lines: lines,\n        size: totalSize,\n        displayInInch: setInInch,\n        errorList: errorList\n    };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///624\n')},864:(__unused_webpack_module,exports,__webpack_require__)=>{eval('/*jslint todo: true, continue: true, white: true*/\n\n// Written by Alex Canales for ShopBotTools, Inc.\n\nvar util = __webpack_require__(891);\n\n/**\n * This file contains the classes managing the lines. The lines are\n * the representation of the G0, G1, G2 and G3 commands.\n */\n\n/**\n * Creates an instance of the StraightLine class. This class does the\n * computations for the G0 and G1 commands.\n *\n * @class\n * @param {number} index - The line number where this command appears.\n * @param {Point} start - The 3D start point.\n * @param {ParsedCommand} parsedCommand - The parsed command.\n * @param {Settings} settings - The modularity settings.\n * @return {StraightLine} An instance of the StraightLine class.\n */\nvar StraightLine = function(index, start, end, parsedCommand, settings) {\n    "use strict";\n    var that = this;\n\n    /**\n     * Returns a line object of type "G0" or "G1" (corresponding to\n     * parsedCommand).\n     *\n     * @function returnLine\n     * @memberof util.StraightLine\n     * @instance\n     * @return {Line} The line object.\n     */\n    that.returnLine = function() {\n        return {\n            lineNumber : that.index,\n            type : that.word,\n            start : that.start,\n            end : that.end,\n            feedrate : that.feedrate\n        };\n    };\n\n    /**\n     * Returns the size of the line.\n     *\n     * @function getSize\n     * @memberof util.StraightLine\n     * @instance\n     * @return {Size} The size.\n     */\n    that.getSize = function() {\n        return {\n            min : {\n                x : Math.min(that.start.x, that.end.x),\n                y : Math.min(that.start.y, that.end.y),\n                z : Math.min(that.start.z, that.end.z),\n            }, max : {\n                x : Math.max(that.start.x, that.end.x),\n                y : Math.max(that.start.y, that.end.y),\n                z : Math.max(that.start.z, that.end.z),\n            }\n        };\n    };\n\n    function initialize(index, start, parsedCommand, settings) {\n        that.index = index;\n        that.word = parsedCommand.type;\n        that.start = { x : start.x, y : start.y, z : start.z };\n        that.end = end;\n        if(parsedCommand.type === "G0") {\n            that.feedrate = 0;\n        } else if(parsedCommand.f === undefined) {\n            that.feedrate = settings.feedrate;\n        } else {\n            that.feedrate = util.calculateFeedrate(parsedCommand.f,\n                    settings.inMm);\n        }\n    }\n\n    initialize(index, start, parsedCommand, settings);\n};\n\n/**\n * Creates an instance of the CurvedLine class. This class does the computations\n * for the G2 and G3 commands.\n *\n * @class\n * @param {number} index - The line number where this command appears.\n * @param {Point} start - The 3D start point.\n * @param {ParsedCommand} parsedCommand - The parsed command.\n * @param {Settings} settings - The modularity settings.\n * @return {CurvedLine} An instance of the CurvedLine class.\n */\nvar CurvedLine = function(index, start, end, parsedCommand, settings) {\n    "use strict";\n    var that = this;\n\n    // Will give 0 if start and end are the same\n    function getBezierAngle() {\n        var axes = util.findAxes(that.crossAxe);\n        var cs = { x : that.start[axes.re] - that.center[axes.re],\n            y : that.start[axes.im] - that.center[axes.im], z : 0};\n        var ce = { x : that.end[axes.re] - that.center[axes.re],\n            y : that.end[axes.im] - that.center[axes.im], z : 0};\n\n        return util.findAngleOrientedVectors2(cs, ce,\n                that.clockwise === false);\n    }\n\n    function getBezierRadius() {\n        var axes = util.findAxes(that.crossAxe);\n        var cs = { x : that.start[axes.re] - that.center[axes.re],\n            y : that.start[axes.im] - that.center[axes.im], z : 0};\n        return util.lengthVector3(cs);\n    }\n\n    //Simple cubic Bézier curve interpolation clockwise on XY plane\n    //angle in radian included in [0; pi/2]\n    //radius > 0\n    //From Richard A DeVeneza\'s work\n    function cubBez2DInt(angle, radius) {\n        var p0 = {}, p1 = {}, p2 ={}, p3 = {};\n        angle = Math.abs(angle);\n        if(angle === Math.PI / 2) {\n            //cos(PI/4) == sin(PI/4) but JavaScript doesn\'t believe it\n            p0 = { x : 0.707106781186548, y : 0.707106781186548, z : 0 };\n            p1 = { x : 1.097631072937817, y : 0.316582489435277, z : 0 };\n        } else {\n            p0 = { x : Math.cos(angle/2), y : Math.sin(angle/2), z : 0 };\n            p1 = {\n                x : (4 - p0.x) / 3,\n                y : (1 - p0.x) * (3 - p0.x) / (3 * p0.y),\n                z : 0\n            };\n        }\n        p0.x *= radius;\n        p0.y *= radius;\n        p1.x *= radius;\n        p1.y *= radius;\n        p2 = { x : p1.x, y : -p1.y, z : 0 };\n        p3 = { x : p0.x, y : -p0.y, z : 0 };\n\n        return { p0 : p0, p1 : p1, p2 : p2, p3 : p3 };\n    }\n\n    //Transform a 2D cubic Bézier\'s curve clockwise on XY plane\n    // to a Bézier\'s curve in 3D with the right crossAxe and clock direction\n    // clockwise is bool\n    // pitch can be positive or negative\n    function cubBez2DTo3D(curve, clockwise, pitch, crossAxe) {\n        var height = 0;  //height position for p1, p2 and p3\n\n        if(clockwise === false) {\n            util.swapObjects(curve.p0, curve.p3);\n            util.swapObjects(curve.p1, curve.p2);\n        }\n\n        //NOTE: maybe this is better:\n        // b = p*alpha*(r - ax)*(3*r -ax)/(ay*(4*r - ax)*Math.tan(alpha))\n        //Set the good cross axe and transform into a helical Bézier curve\n        height = pitch / 3;\n        if(crossAxe.toLowerCase() === "z") {\n            curve.p0.z = 0;\n            curve.p1.z = height;\n            curve.p2.z = height * 2;\n            curve.p3.z = height * 3;\n        } else if(crossAxe.toLowerCase() === "x") {\n            curve.p0.z = curve.p0.y;\n            curve.p0.y = curve.p0.x;\n            curve.p0.x = 0;\n            curve.p1.z = curve.p1.y;\n            curve.p1.y = curve.p1.x;\n            curve.p1.x = height;\n            curve.p2.z = curve.p2.y;\n            curve.p2.y = curve.p2.x;\n            curve.p2.x = height * 2;\n            curve.p3.z = curve.p3.y;\n            curve.p3.y = curve.p3.x;\n            curve.p3.x = height * 3;\n        } else if(crossAxe.toLowerCase() === "y") {\n            curve.p0.z = curve.p0.x;\n            curve.p0.x = curve.p0.y;\n            curve.p0.y = 0;\n            curve.p1.z = curve.p1.x;\n            curve.p1.x = curve.p1.y;\n            curve.p1.y = height;\n            curve.p2.z = curve.p2.x;\n            curve.p2.x = curve.p2.y;\n            curve.p2.y = height * 2;\n            curve.p3.z = curve.p3.x;\n            curve.p3.x = curve.p3.y;\n            curve.p3.y = height * 3;\n        }\n\n        return curve;\n    }\n\n    function rotAndPlaBez(curve, center, angle, re, im) {\n        var c = { x : 0, y : 0, z : 0 };\n        util.scaleAndRotation(c,curve.p0,curve.p0, angle, 1, re, im);\n        util.scaleAndRotation(c,curve.p1,curve.p1, angle, 1, re, im);\n        util.scaleAndRotation(c,curve.p2,curve.p2, angle, 1, re, im);\n        util.scaleAndRotation(c,curve.p3,curve.p3, angle, 1, re, im);\n\n        util.movePoint(curve.p0, center);\n        util.movePoint(curve.p1, center);\n        util.movePoint(curve.p2, center);\n        util.movePoint(curve.p3, center);\n    }\n\n    // The Bézier\'s curve must be on the good plane\n    function getFullBezier(num90, bez90, numSmall, bezSmall, pitch90) {\n        var arcs = [];\n        var center = util.copyObject(that.center);\n        var axes = util.findAxes(that.crossAxe);\n        var cs = { x : that.start[axes.re] - center[axes.re],\n            y : that.start[axes.im] - center[axes.im] };\n        var i = 0, angle = 0, sign = (that.clockwise === true) ? -1 : 1;\n\n        if(num90 === 0 && numSmall === 0) {\n            return arcs;\n        }\n\n        if(num90 > 0) {\n            angle = util.findAngleOrientedVectors2(\n                    { x : bez90.p0[axes.re], y : bez90.p0[axes.im] }, cs,\n                    that.clockwise === false\n                    );\n\n            for(i = 0; i < num90; i++) {\n                arcs.push(util.copyObject(bez90));\n                rotAndPlaBez(arcs[i], center, angle, axes.re, axes.im);\n                // angle += Math.PI / 2 * sign;\n                angle += 1.570796326794897 * sign;\n                center[that.crossAxe] += pitch90;\n            }\n        }\n\n        if(numSmall > 0) {\n            angle = util.findAngleOrientedVectors2(\n                    { x : bezSmall.p0[axes.re], y : bezSmall.p0[axes.im] }, cs,\n                    that.clockwise === false\n                    );\n\n            if(num90 !== 0) {\n                angle += num90 * 1.570796326794897 * sign;\n            }\n            arcs.push(util.copyObject(bezSmall));\n            rotAndPlaBez(arcs[i], center, angle, axes.re, axes.im);\n        }\n\n        //To be sure the first point is at the start\n        arcs[0].p0.x = that.start.x;\n        arcs[0].p0.y = that.start.y;\n        arcs[0].p0.z = that.start.z;\n\n        //To be sure the last point is at the end\n        arcs[arcs.length-1].p3.x = that.end.x;\n        arcs[arcs.length-1].p3.y = that.end.y;\n        arcs[arcs.length-1].p3.z = that.end.z;\n\n        return arcs;\n    }\n\n    function arcToBezier() {\n        var num90 = 0, numSmall = 1;  //Number arc = pi/2 and arc < pi/2\n        var bez90 = {}, bezSmall = {};\n        var p90 = 0, pLittle = 0, pAngle = 0; //Pitch of the arcs\n        var angle = getBezierAngle();\n        var radius = getBezierRadius();\n        var absAngle = Math.abs(angle), halfPI = 1.570796326794897;\n\n        if(angle === 0 || radius === 0) {\n            return [];\n        }\n\n        //Find number of diferent sections\n        if(absAngle > halfPI) {\n            //Untrustful (as this language) function, should be tested:\n            num90 = parseInt(absAngle / halfPI, 10);\n            numSmall = (absAngle % halfPI !== 0) ? 1 : 0;\n        }\n\n        //Find pitches\n        pAngle = (that.end[that.crossAxe] - that.start[that.crossAxe]) / absAngle;\n        p90 = halfPI * pAngle;\n        pLittle = (absAngle - num90 * halfPI) * pAngle;\n\n        //Find helical Bézier\'s curves\n        if(num90 > 0) {\n            bez90 = cubBez2DInt(halfPI, radius);\n            cubBez2DTo3D(bez90, (angle < 0), p90, that.crossAxe);\n        }\n        if(numSmall > 0) {\n            angle = absAngle - num90 * halfPI;\n            if(that.clockwise === true) {\n                angle = -angle;\n            }\n            bezSmall = cubBez2DInt(angle, radius);\n            cubBez2DTo3D(bezSmall, (angle < 0), pLittle, that.crossAxe);\n        }\n\n        return getFullBezier(num90, bez90, numSmall, bezSmall, p90);\n    }\n\n    //Cannot use arcToBezier because of calculus of oriented angle\n    function circleToBezier() {\n        var bez90 = {};\n        var bezier = [];\n        var pitch = 0;\n        var halfPI = 1.570796326794897;\n        var sign = (that.clockwise === true) ? -1 : 1;\n        var rotAngle = sign * Math.PI * 2;\n        var radius = getBezierRadius();\n        var i = 0;\n        var center = util.copyObject(that.center);\n        var axes = util.findAxes(that.crossAxe);\n\n        if(radius === 0) {\n            return [];\n        }\n\n        //We cannot just make a full circle without caring of the start and\n        //end point. Therefore, we need to use the rotation\n        pitch = (that.end[that.crossAxe] - that.start[that.crossAxe]) / 4;\n        bez90 = cubBez2DInt(halfPI, radius);\n        cubBez2DTo3D(bez90, that.clockwise, pitch, that.crossAxe);\n\n        for(i = 0; i < 4; i++) {\n            bezier.push(util.copyObject(bez90));\n            rotAndPlaBez(bezier[i], center, rotAngle, axes.re, axes.im);\n            rotAngle += halfPI * sign;\n            center[that.crossAxe] += pitch;\n        }\n\n        return getFullBezier(4, bez90, 0, bez90, pitch);\n    }\n\n    /**\n     * Returns a line object of type "G2" or "G3" (corresponding to\n     * parsedCommand).\n     *\n     * @function returnLine\n     * @memberof util.CurvedLine\n     * @instance\n     * @return {Line|boolean} False if impossible line else the line object.\n     */\n    that.returnLine = function() {\n        var bez = [];\n        var axes = util.findAxes(that.crossAxe);\n\n        if(that.start[axes.re] === that.end[axes.re] &&\n                that.start[axes.im] === that.end[axes.im]) {\n            bez = circleToBezier();\n        } else {\n            bez = arcToBezier();\n        }\n\n        if(bez.length === 0) {\n            return false;\n        }\n\n        return {\n            lineNumber  : that.index,\n            type : that.word,\n            beziers : bez,\n            feedrate : that.feedrate\n        };\n    };\n\n    /**\n     * Finds the center of the arc. Returns false if impossible.\n     *\n     * @param {Point} start The starting point of the arc.\n     * @param {Point} end The ending point of the arc.\n     * @param {boolean} clockwise If the arc goes clockwise.\n     * @param {string} crossAxe The name of the axe given by the cross product\n     * of the vectors defining the plane.\n     * @return {object|boolean} The center point or false.\n     */\n    function findCenterWithRadius(start, end, radius, clockwise, crossAxe) {\n        var se = { x : end.x - start.x, y : end.y - start.y,\n            z : end.z - start.z\n        };\n        var angle = 0, l = 1, lSE = 0, r = Math.abs(radius), aCSCE = 0;\n        var center = { x : 0, y : 0, z : 0 };\n        var axes = util.findAxes(crossAxe);\n        lSE = Math.sqrt(se[axes.re] * se[axes.re] + se[axes.im] * se[axes.im]);\n\n        if(lSE > Math.abs(radius * 2) || lSE === 0) {\n            return false;\n        }\n\n        angle = Math.acos(lSE / (2 * r));\n        l = r / lSE;\n        util.scaleAndRotation(start, end, center, angle, l, axes.re, axes.im);\n        aCSCE = util.findAngleVectors2(\n            { x: start[axes.re]-center[axes.re], y: start[axes.im]-center[axes.im] },\n            { x: end[axes.re]-center[axes.re], y: end[axes.im]-center[axes.im] }\n        );\n\n        if(clockwise === true) {\n            if(radius > 0 && -Math.PI <= aCSCE && aCSCE <= 0) {\n                return center;\n            }\n            if(radius < 0 && 0 <= aCSCE && aCSCE <= Math.PI) {\n                return center;\n            }\n        } else {\n            if(radius > 0 && 0 <= aCSCE && aCSCE <= Math.PI) {\n                return center;\n            }\n            if(radius < 0 && -Math.PI <= aCSCE && aCSCE <= 0) {\n                return center;\n            }\n        }\n\n        util.scaleAndRotation(start, end, center, -angle, l, axes.re, axes.im);\n        return center;\n    }\n\n    //radius is positive or negative\n    function findCenter(start, end, parsedCommand, clockwise, crossAxe, inMm) {\n        var delta = (inMm === false) ? 1 : util.MILLIMETER_TO_INCH;\n        var center = { x : start.x, y : start.y, z : start.z };\n        var distCenterStart, distCenterEnd;\n        var axes = util.findAxes(crossAxe);\n\n        if(parsedCommand.r === undefined) {\n            if(parsedCommand.i !== undefined) {\n                center.x += parsedCommand.i * delta;\n            }\n            if(parsedCommand.j !== undefined) {\n                center.y += parsedCommand.j * delta;\n            }\n            if(parsedCommand.k !== undefined) {\n                center.z += parsedCommand.k * delta;\n            }\n\n            //Check if not impossible\n            distCenterStart = Math.pow(center[axes.re] - start[axes.re], 2);\n            distCenterStart += Math.pow(center[axes.im] - start[axes.im], 2);\n\n            distCenterEnd = Math.pow(center[axes.re] - end[axes.re], 2);\n            distCenterEnd += Math.pow(center[axes.im] - end[axes.im], 2);\n\n            if(util.nearlyEqual(distCenterStart, 0) === true ||\n                util.nearlyEqual(distCenterEnd, 0) === true) {\n                return false;\n            }\n\n            if(util.nearlyEqual(distCenterStart, distCenterEnd) === false) {\n                return false;\n            }\n        } else {\n            center = findCenterWithRadius(start, end, parsedCommand.r * delta,\n                clockwise, crossAxe);\n            if(center === false) {\n                return false;\n            }\n        }\n        center[crossAxe] = start[crossAxe];\n        return center;\n    }\n\n    function axeCutArc(reValue, imValue, angleBezier, cs) {\n        //Find the angle in the same orientation than the Bézier\'s angle\n        var a = util.findAngleOrientedVectors2(cs,\n                { x : reValue, y : imValue }, that.clockwise === false);\n        return (util.isInclude(a, 0, angleBezier) === true);\n    }\n\n    /**\n     * Returns the size of the line.\n     *\n     * @function getSize\n     * @memberof util.CurvedLine\n     * @instance\n     * @return {Size} The size.\n     */\n    that.getSize = function() {\n        var axes = util.findAxes(that.crossAxe);\n        var cs = {\n            x : that.start[axes.re] - that.center[axes.re],\n            y : that.start[axes.im] - that.center[axes.im]\n        };\n        var radius = getBezierRadius(), aBez = getBezierAngle();\n        var min = { x : 0 , y : 0, z : 0 }, max = { x : 0 , y : 0, z : 0 };\n\n        // Is circle\n        if(that.start[axes.re] === that.end[axes.re] &&\n                that.start[axes.im] === that.end[axes.im]) {\n            min[axes.re] = that.center[axes.re] - radius;\n            min[axes.im] = that.center[axes.im] - radius;\n            min[axes.cr] = Math.min(that.start[axes.cr], that.end[axes.cr]);\n            max[axes.re] = that.center[axes.re] + radius;\n            max[axes.im] = that.center[axes.im] + radius;\n            max[axes.cr] = Math.max(that.start[axes.cr], that.end[axes.cr]);\n            return { min : min, max : max };\n        }\n\n        min.x = Math.min(that.start.x, that.end.x);\n        min.y = Math.min(that.start.y, that.end.y);\n        min.z = Math.min(that.start.z, that.end.z);\n        max.x = Math.max(that.start.x, that.end.x);\n        max.y = Math.max(that.start.y, that.end.y);\n        max.z = Math.max(that.start.z, that.end.z);\n\n        if(axeCutArc(0, 1, aBez, cs) === true) {\n            max[axes.im] = that.center[axes.im] + radius;\n        }\n        if(axeCutArc(0, -1, aBez, cs) === true) {\n            min[axes.im] = that.center[axes.im] - radius;\n        }\n        if(axeCutArc(1, 0, aBez, cs) === true) {\n            max[axes.re] = that.center[axes.re] + radius;\n        }\n        if(axeCutArc(-1, 0, aBez, cs) === true) {\n            min[axes.re] = that.center[axes.re] - radius;\n        }\n\n        return { min : min, max : max };\n    };\n\n    function initialize(index, start, parsedCommand, settings) {\n        that.index = index;\n        that.word = parsedCommand.type;\n        that.start = { x : start.x, y : start.y, z : start.z };\n        that.end = end;\n        that.clockwise = (parsedCommand.type === "G2");\n        that.center = findCenter(start, that.end, parsedCommand,\n                that.clockwise, settings.crossAxe, settings.inMm);\n        that.crossAxe = settings.crossAxe;\n        if(parsedCommand.f === undefined) {\n            that.feedrate = settings.feedrate;\n        } else {\n            that.feedrate = util.calculateFeedrate(parsedCommand.f,\n                    settings.inMm);\n        }\n    }\n\n    initialize(index, start, parsedCommand, settings);\n};\n\nexports._ = StraightLine;\nexports.Q = CurvedLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///864\n')},477:(__unused_webpack_module,exports)=>{eval('var GParser = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = "SyntaxError";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = [],\n        peg$c3 = function(num, words) {\n              return {\'N\':num, \'words\':words}\n        },\n        peg$c4 = function(word, value) { return [word, value]; },\n        peg$c5 = "N",\n        peg$c6 = { type: "literal", value: "N", description: "\\"N\\"" },\n        peg$c7 = /^[0-9]/,\n        peg$c8 = { type: "class", value: "[0-9]", description: "[0-9]" },\n        peg$c9 = function() { return parseInt(text()); },\n        peg$c10 = /^[+\\-]/,\n        peg$c11 = { type: "class", value: "[+\\\\-]", description: "[+\\\\-]" },\n        peg$c12 = /^[.]/,\n        peg$c13 = { type: "class", value: "[.]", description: "[.]" },\n        peg$c14 = function() { return parseFloat(text()); },\n        peg$c15 = "[",\n        peg$c16 = { type: "literal", value: "[", description: "\\"[\\"" },\n        peg$c17 = "]",\n        peg$c18 = { type: "literal", value: "]", description: "\\"]\\"" },\n        peg$c19 = function(expr) {return expr; },\n        peg$c20 = "ATAN",\n        peg$c21 = { type: "literal", value: "ATAN", description: "\\"ATAN\\"" },\n        peg$c22 = "/",\n        peg$c23 = { type: "literal", value: "/", description: "\\"/\\"" },\n        peg$c24 = function(left, right) { \n            return {\'op\':"ATAN", \'left\':left, \'right\':right};\n        },\n        peg$c25 = function(op, expr) {return {\'op\':op, \'right\':expr}},\n        peg$c26 = "#",\n        peg$c27 = { type: "literal", value: "#", description: "\\"#\\"" },\n        peg$c28 = function(expr) { return {\'op\':\'#\', \'right\':expr }},\n        peg$c29 = function(first, rest) { \n                return buildTree(first, rest);\n            },\n        peg$c30 = function(first, rest) {\n              return buildTree(first, rest);\n            },\n        peg$c31 = "**",\n        peg$c32 = { type: "literal", value: "**", description: "\\"**\\"" },\n        peg$c33 = "*",\n        peg$c34 = { type: "literal", value: "*", description: "\\"*\\"" },\n        peg$c35 = "MOD",\n        peg$c36 = { type: "literal", value: "MOD", description: "\\"MOD\\"" },\n        peg$c37 = "+",\n        peg$c38 = { type: "literal", value: "+", description: "\\"+\\"" },\n        peg$c39 = "-",\n        peg$c40 = { type: "literal", value: "-", description: "\\"-\\"" },\n        peg$c41 = "OR",\n        peg$c42 = { type: "literal", value: "OR", description: "\\"OR\\"" },\n        peg$c43 = "XOR",\n        peg$c44 = { type: "literal", value: "XOR", description: "\\"XOR\\"" },\n        peg$c45 = "AND",\n        peg$c46 = { type: "literal", value: "AND", description: "\\"AND\\"" },\n        peg$c47 = "ABS",\n        peg$c48 = { type: "literal", value: "ABS", description: "\\"ABS\\"" },\n        peg$c49 = "ACOS",\n        peg$c50 = { type: "literal", value: "ACOS", description: "\\"ACOS\\"" },\n        peg$c51 = "ASIN",\n        peg$c52 = { type: "literal", value: "ASIN", description: "\\"ASIN\\"" },\n        peg$c53 = "COS",\n        peg$c54 = { type: "literal", value: "COS", description: "\\"COS\\"" },\n        peg$c55 = "EXP",\n        peg$c56 = { type: "literal", value: "EXP", description: "\\"EXP\\"" },\n        peg$c57 = "FIX",\n        peg$c58 = { type: "literal", value: "FIX", description: "\\"FIX\\"" },\n        peg$c59 = "FUP",\n        peg$c60 = { type: "literal", value: "FUP", description: "\\"FUP\\"" },\n        peg$c61 = "ROUND",\n        peg$c62 = { type: "literal", value: "ROUND", description: "\\"ROUND\\"" },\n        peg$c63 = "LN",\n        peg$c64 = { type: "literal", value: "LN", description: "\\"LN\\"" },\n        peg$c65 = "SIN",\n        peg$c66 = { type: "literal", value: "SIN", description: "\\"SIN\\"" },\n        peg$c67 = "SQRT",\n        peg$c68 = { type: "literal", value: "SQRT", description: "\\"SQRT\\"" },\n        peg$c69 = "TAN",\n        peg$c70 = { type: "literal", value: "TAN", description: "\\"TAN\\"" },\n        peg$c71 = "EXISTS",\n        peg$c72 = { type: "literal", value: "EXISTS", description: "\\"EXISTS\\"" },\n        peg$c73 = "A",\n        peg$c74 = { type: "literal", value: "A", description: "\\"A\\"" },\n        peg$c75 = "B",\n        peg$c76 = { type: "literal", value: "B", description: "\\"B\\"" },\n        peg$c77 = "C",\n        peg$c78 = { type: "literal", value: "C", description: "\\"C\\"" },\n        peg$c79 = "D",\n        peg$c80 = { type: "literal", value: "D", description: "\\"D\\"" },\n        peg$c81 = "F",\n        peg$c82 = { type: "literal", value: "F", description: "\\"F\\"" },\n        peg$c83 = "G",\n        peg$c84 = { type: "literal", value: "G", description: "\\"G\\"" },\n        peg$c85 = "H",\n        peg$c86 = { type: "literal", value: "H", description: "\\"H\\"" },\n        peg$c87 = "I",\n        peg$c88 = { type: "literal", value: "I", description: "\\"I\\"" },\n        peg$c89 = "J",\n        peg$c90 = { type: "literal", value: "J", description: "\\"J\\"" },\n        peg$c91 = "K",\n        peg$c92 = { type: "literal", value: "K", description: "\\"K\\"" },\n        peg$c93 = "L",\n        peg$c94 = { type: "literal", value: "L", description: "\\"L\\"" },\n        peg$c95 = "M",\n        peg$c96 = { type: "literal", value: "M", description: "\\"M\\"" },\n        peg$c97 = "P",\n        peg$c98 = { type: "literal", value: "P", description: "\\"P\\"" },\n        peg$c99 = "Q",\n        peg$c100 = { type: "literal", value: "Q", description: "\\"Q\\"" },\n        peg$c101 = "R",\n        peg$c102 = { type: "literal", value: "R", description: "\\"R\\"" },\n        peg$c103 = "S",\n        peg$c104 = { type: "literal", value: "S", description: "\\"S\\"" },\n        peg$c105 = "T",\n        peg$c106 = { type: "literal", value: "T", description: "\\"T\\"" },\n        peg$c107 = "X",\n        peg$c108 = { type: "literal", value: "X", description: "\\"X\\"" },\n        peg$c109 = "Y",\n        peg$c110 = { type: "literal", value: "Y", description: "\\"Y\\"" },\n        peg$c111 = "Z",\n        peg$c112 = { type: "literal", value: "Z", description: "\\"Z\\"" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if ("startRule" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error("Can\'t start parsing from rule \\"" + options.startRule + "\\".");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: "other", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === "\\n") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === "\\r" || ch === "\\u2028" || ch === "\\u2029") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   \'\\\\\\\\\')\n            .replace(/"/g,    \'\\\\"\')\n            .replace(/\\x08/g, \'\\\\b\')\n            .replace(/\\t/g,   \'\\\\t\')\n            .replace(/\\n/g,   \'\\\\n\')\n            .replace(/\\f/g,   \'\\\\f\')\n            .replace(/\\r/g,   \'\\\\r\')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return \'\\\\x0\' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return \'\\\\x\'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return \'\\\\u0\' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return \'\\\\u\'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(", ")\n              + " or "\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? "\\"" + stringEscape(found) + "\\"" : "end of input";\n\n        return "Expected " + expectedDesc + " but " + foundDesc + " found.";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsestart() {\n      var s0;\n\n      s0 = peg$parseline();\n\n      return s0;\n    }\n\n    function peg$parseline() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseline_number();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseword();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseword();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c3(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseword() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseletter();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefactor1();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c4(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseline_number() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 78) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseinteger();\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseinteger() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      if (peg$c7.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          if (peg$c7.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c9();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (peg$c10.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c7.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c7.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (peg$c12.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c7.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c7.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                }\n              }\n            } else {\n              s5 = peg$c0;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c14();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseexpression() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c15;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c16); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefactor4();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c17;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c18); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c19(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseatan_factor() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c20) {\n        s1 = peg$c20;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s3 = peg$c22;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseexpression();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c24(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseunary_factor() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseunary_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c25(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseparam_value() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s1 = peg$c26;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c27); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsenumber();\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseparam_value();\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c28(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor1() {\n      var s0;\n\n      s0 = peg$parseexpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenumber();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseatan_factor();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunary_factor();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseparam_value();\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor2() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsefactor1();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsegroup1_op();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsefactor1();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsegroup1_op();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefactor1();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c29(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor3() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsefactor2();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsegroup2_op();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsefactor2();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsegroup2_op();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefactor2();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c30(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefactor4() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsefactor3();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsegroup3_op();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsefactor3();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsegroup3_op();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefactor3();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c30(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup1_op() {\n      var s0;\n\n      if (input.substr(peg$currPos, 2) === peg$c31) {\n        s0 = peg$c31;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup2_op() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s0 = peg$c33;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s0 = peg$c22;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c35) {\n            s0 = peg$c35;\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsegroup3_op() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s0 = peg$c37;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c39;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c41) {\n            s0 = peg$c41;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c42); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c43) {\n              s0 = peg$c43;\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c44); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c45) {\n                s0 = peg$c45;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseunary_op() {\n      var s0;\n\n      if (input.substr(peg$currPos, 3) === peg$c47) {\n        s0 = peg$c47;\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c48); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c49) {\n          s0 = peg$c49;\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c50); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c51) {\n            s0 = peg$c51;\n            peg$currPos += 4;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c53) {\n              s0 = peg$c53;\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c54); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c55) {\n                s0 = peg$c55;\n                peg$currPos += 3;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c56); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c57) {\n                  s0 = peg$c57;\n                  peg$currPos += 3;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c58); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 3) === peg$c59) {\n                    s0 = peg$c59;\n                    peg$currPos += 3;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c60); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 5) === peg$c61) {\n                      s0 = peg$c61;\n                      peg$currPos += 5;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c63) {\n                        s0 = peg$c63;\n                        peg$currPos += 2;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c65) {\n                          s0 = peg$c65;\n                          peg$currPos += 3;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c66); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4) === peg$c67) {\n                            s0 = peg$c67;\n                            peg$currPos += 4;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 3) === peg$c69) {\n                              s0 = peg$c69;\n                              peg$currPos += 3;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 6) === peg$c71) {\n                                s0 = peg$c71;\n                                peg$currPos += 6;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseletter() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 65) {\n        s0 = peg$c73;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 66) {\n          s0 = peg$c75;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c76); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 67) {\n            s0 = peg$c77;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c78); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 68) {\n              s0 = peg$c79;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c80); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 70) {\n                s0 = peg$c81;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c82); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 71) {\n                  s0 = peg$c83;\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c84); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 72) {\n                    s0 = peg$c85;\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c86); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 73) {\n                      s0 = peg$c87;\n                      peg$currPos++;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c88); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 74) {\n                        s0 = peg$c89;\n                        peg$currPos++;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c90); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 75) {\n                          s0 = peg$c91;\n                          peg$currPos++;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 76) {\n                            s0 = peg$c93;\n                            peg$currPos++;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 77) {\n                              s0 = peg$c95;\n                              peg$currPos++;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 80) {\n                                s0 = peg$c97;\n                                peg$currPos++;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 81) {\n                                  s0 = peg$c99;\n                                  peg$currPos++;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.charCodeAt(peg$currPos) === 82) {\n                                    s0 = peg$c101;\n                                    peg$currPos++;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c102); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 83) {\n                                      s0 = peg$c103;\n                                      peg$currPos++;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.charCodeAt(peg$currPos) === 84) {\n                                        s0 = peg$c105;\n                                        peg$currPos++;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.charCodeAt(peg$currPos) === 88) {\n                                          s0 = peg$c107;\n                                          peg$currPos++;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.charCodeAt(peg$currPos) === 89) {\n                                            s0 = peg$c109;\n                                            peg$currPos++;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            if (input.charCodeAt(peg$currPos) === 90) {\n                                              s0 = peg$c111;\n                                              peg$currPos++;\n                                            } else {\n                                              s0 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n\n       buildTree = function(first, rest) {\n          if(rest.length == 0) {\n              return first;\n          } else { \n              var next = rest.shift();\n              var operator = next[0]\n              var term = next[1]\n              return {left: first, right: buildTree(term, rest), op: operator};\n          }\n       }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: "end", description: "end of input" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n\nexports.o = GParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///477\n')},891:(__unused_webpack_module,exports)=>{"use strict";eval('/*jslint todo: true, continue: true, white: true*/\n\n//  Written by Alex Canales for ShopBotTools, Inc.\n\n/**\n * A 3D point.\n *\n * @typedef {object} Point\n * @property {number} x - The x coordinate.\n * @property {number} y - The y coordinate.\n * @property {number} z - The z coordinate.\n */\n\n/**\n * A helper for finding axes according to the chosen plane.\n *\n * @typedef {object} Axes\n * @property {string} re - The axis for REal numbers.\n * @property {string} im - The axis for IMaginary numbers.\n * @property {string} cr - The CRoss axis.\n */\n\n/**\n * An object defining a cubic Bézier curve.\n *\n * @typedef {object} Bezier\n * @property {Point} p0 - The first control point.\n * @property {Point} p1 - The second control point.\n * @property {Point} p2 - The third control point.\n * @property {Point} p3 - The fourth control point.\n */\n\n/**\n * An object defining a line.\n *\n * @typedef {object} Line\n * @property {number} lineNumber - The line number in the G-Code file\n * corresponding to the line definition.\n * @property {string} type - The G-Code command.\n * @property {number} feedrate - The feed rate for doing the path defined by\n * the line.\n * @property {Point} [start] - The starting point of the line if type "G0" or\n * "G1".\n * @property {Point} [end] - The ending point of the line if type "G0" or "G1".\n * @property {Bezier[]} [bez] - The bezier curves defining the point if type\n * "G2" or G3".\n */\n\n/**\n * Defines the settings of the G-Code. It changes constantly according to the\n * G-Code commands used.\n *\n * @typedef {object} Settings\n * @property {string} [crossAxe="z"] - The cross axe.\n * @property {number} [feedrate=0] - The feed rate.\n * @property {boolean} [inMm=false] - If the units are in millimeters.\n * @property {Point} [position={x:0, y:0, z:0}] - The last position of the bit.\n * @property {string} [previousMoveCommand=""] - The previous move command\n * ("G0", "G1", "G2", "G3").\n * @property {boolean} [relative=false] - If the coordinates are relative.\n*/\n\n/**\n * Defines a single command parsed by the G-Code syntax parser. The definition\n * is not exhaustive.\n *\n * @typedef {object} ParsedCommand\n * @property {string} type - The command type.\n * @property {number} [x] - The X argument.\n * @property {number} [y] - The Y argument.\n * @property {number} [z] - The Z argument.\n * @property {number} [f] - The F argument.\n * @property {number} [r] - The R argument.\n * @property {number} [i] - The I argument.\n * @property {number} [j] - The J argument.\n * @property {number} [k] - The K argument.\n */\n\n/**\n * An object defining the size.\n *\n * @typedef {object} Size\n * @property {Point} min - The lowest values in x, y and z coordinates.\n * @property {Point} max - The highest values in x, y and z coordinates.\n */\n\n/**\n * Errors can happen in G-Code files. It can be simple warning where code is\n * parsed but can have a different behaviour depending on the machine, or it\n * can be a real error and the command is skipped.\n *\n * @typedef {object} Error\n * @property {number} line - The line number where the error occurs.\n * @property {string} message - The message explaining the error.\n * @property {boolean} isSkipped - If the command is skipped.\n */\n\n/**\n * An object defining the parsed G-Code. This is what that should be used by\n * the developper using this library.\n *\n * @typedef {object} ParsedGCode\n * @property {string[]} gcode - The original G-Code, each cell contains a\n * single command.\n * @property {Lines[]} lines - The lines defining the path the bit will take.\n * @property {Size} size - The size the job will take.\n * @property {boolean} displayInInch - If the job shoud be display in inches.\n * @property {Error} errorList - The error the G-Code contains.\n */\n\n/**\n * This file contains useful scripts for different purposes (geometry, object\n * operations...). It also create the util namespace.\n */\n\n\n\n/**\n * Namespace for the library.\n *\n * @namespace\n */\nvar util = {};\n\n/**\n * Constant for converting inches values into millimeters values.\n */\nutil.INCH_TO_MILLIMETER = 25.4;\n\n/**\n * Constant for converting millimeters values into inches values.\n */\nutil.MILLIMETER_TO_INCH = 0.03937008;\n\n/*\n * Precision constant for comparing floats. Used in util.nearlyEqual.\n */\nutil.FLOAT_PRECISION = 0.001;\n\n/*\n * Converts the feedrate in inches according to the types of unit used.\n *\n * @param {number} feedrate - The given feedrate.\n * @param {number} inMm - If the feedrate is in millimeters.\n * Returns the feedrate in inches.\n */\nutil.calculateFeedrate = function(feedrate, inMm) {\n    return (inMm === false) ? feedrate : feedrate * util.MILLIMETER_TO_INCH;\n};\n\n/**\n * Checks if two numbers are nearly equal. This function is used to avoid\n * to have too much precision when checking values between floating-point\n * numbers.\n *\n * @param {number} a - Number A.\n * @param {number} b - Number B.\n * @param {number} [precision=util.FLOAT_PRECISION] - The precision\n * of the comparaison.\n * @return {boolean} True if the two values are nearly equal.\n */\nutil.nearlyEqual = function(a, b, precision) {\n    var p = (precision === undefined) ? util.FLOAT_PRECISION : precision;\n    return Math.abs(b - a) <= p;\n};\n\n/**\n * Swaps two objects. It has to be the same objects, too bad if it\'s not.\n *\n * @param {object} obj1 - The first object.\n * @param {object} obj2 - The second object.\n*/\nutil.swapObjects = function(obj1, obj2) {\n    function swapSingleField(objA, objB, key) {\n        var temp;\n        temp = objA[key];\n        objA[key] = objB[key];\n        objB[key] = temp;\n    }\n    var keys = Object.keys(obj1);\n    var i = 0;\n\n    for(i = 0; i < keys.length; i++) {\n        if(typeof obj1[keys[i]] === "object") {\n            util.swapObjects(obj1[keys[i]], obj2[keys[i]]);\n        } else {\n            swapSingleField(obj1, obj2, keys[i]);\n        }\n    }\n};\n\n/**\n * Returns the copy of the object.\n *\n * @param {object} object - The object.\n * @return {object} The copy of the object.\n*/\nutil.copyObject = function(object) {\n    var keys = Object.keys(object);\n    var i = 0;\n    var copy = {};\n    for(i = 0; i < keys.length; i++) {\n        if(typeof object[keys[i]] === "object") {\n            copy[keys[i]] = util.copyObject(object[keys[i]]);\n        } else {\n            copy[keys[i]] = object[keys[i]];\n        }\n    }\n    return copy;\n};\n\n/**\n * Moves the point according to the vector.\n *\n * @param {Point} point - The point to move.\n * @param {Point} vector - The vector.\n */\nutil.movePoint = function(point, vector) {\n    var keys = Object.keys(vector);\n    var i = 0;\n    for(i = 0; i < keys.length; i++) {\n        if(point[keys[i]] !== undefined) {\n            point[keys[i]] += vector[keys[i]];\n        }\n    }\n};\n\n/**\n * Does a 2D dot product.\n *\n * @param {Point} v1 - The first vector.\n * @param {Point} v2 - The second vector.\n * @return {number} The result.\n */\nutil.dotProduct2 = function(v1, v2) {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n\n/**\n * Does a 2D cross product.\n *\n * @param {Point} v1 - The first vector.\n * @param {Point} v2 - The second vector.\n * @return {number} The result on the Z axis.\n */\nutil.crossProduct2 = function(v1, v2) {\n    return v1.x * v2.y - v2.x * v1.y;\n};\n\n/**\n * Calculates the length of a 3D vector.\n *\n * @param {Point} v - The vector.\n * @return {number} The vector length.\n */\nutil.lengthVector3 = function(v) {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n};\n\n/**\n * Returns object of 3 axes:\n *  re is the axes for REal numbers;\n *  im for the IMaginary numbers;\n *  cr for the CRoss axis\n *\n * @param {string} crossAxe The name of the axis given by the cross product of\n * the vectors defining the plane. Should be "x", "y" or "z", considered "z" if\n * not "x" or "y".\n * @return {Axes} The object defining the real, imaginary and cross axis.\n */\nutil.findAxes = function(crossAxe) {\n    if(crossAxe.toLowerCase() === "x") {\n        return { re : "y", im : "z", cr : "x"};\n    }\n    if(crossAxe.toLowerCase() === "y") {\n        return { re : "z", im : "x", cr : "y"};\n    }\n    return { re : "x", im : "y", cr : "z"};\n};\n\n/**\n * Does a rotation and scale of point according to center. Stores the result in\n * newPoint.\n *\n * @param {Point} center - The center of the rotation and scale.\n * @param {Point} point - The point to modify.\n * @param {Point} newPoint - The point storying the result.\n * @param {number} angle - The angle in radians.\n * @param {number} length - The scale ratio.\n * @param {string} re - The real axis.\n * @param {string} im - The imaginary axis.\n */\nutil.scaleAndRotation = function(\n    center, point, newPoint, angle, length, re, im\n) {\n    var c = center, p = point, nP = newPoint;\n    var l = length, cA = Math.cos(angle), sA = Math.sin(angle);\n    var pRe = p[re], pIm = p[im], cRe = c[re], cIm = c[im];\n\n    nP[re] = l * ((pRe - cRe) * cA - (pIm - cIm) * sA) + cRe;\n    nP[im] = l * ((pIm - cIm) * cA + (pRe - cRe) * sA) + cIm;\n};\n\n/**\n * Returns the signed angle in radian in 2D (between -PI and PI).\n *\n * @param {Point} v1 - The first vector.\n * @param {Point} v2 - The second vector.\n * @return {number} The angle in radian.\n */\nutil.findAngleVectors2 = function(v1, v2) {\n    var sign = (util.crossProduct2(v1, v2) < 0) ? -1 : 1;\n    var dot = util.dotProduct2(v1, v2);\n    var lV1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y);\n    var lV2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y);\n\n    if(lV1 === 0 || lV2 === 0) {\n        return 0;\n    }\n\n    return sign * Math.acos(dot / (lV1 * lV2));\n};\n\n/**\n * Returns the signed angle in radian in 2d (between -2pi and 2pi).\n *\n * @param {Point} v1 - The first vector.\n * @param {Point} v2 - The second vector.\n * @param {boolean} positive - If the oriented angle goes counter-clockwise.\n * @return {number} The angle in radian.\n */\nutil.findAngleOrientedVectors2 = function(v1, v2, positive) {\n    var angle =  util.findAngleVectors2(v1, v2);\n\n    if(positive === false && angle > 0) {\n        return angle - Math.PI * 2;\n    }\n    if(positive === true && angle < 0) {\n        return Math.PI * 2 + angle;\n    }\n\n    return angle;\n};\n\n/**\n * Checks if the value is include between the value a (include) and b (include).\n * Order between a and b does not matter.\n *\n * @param {number} value - The value.\n * @param {number} a - The first boundary.\n * @param {number} b - The second boundary.\n * @return {boolean} The result.\n */\nutil.isInclude = function(value, a, b) {\n    return (b < a) ? (b <= value && value <= a) : (a <= value && value <= b);\n};\n\nvar keys = Object.keys(util);\nvar i = 0;\nfor(i = 0; i < keys.length; i++) {\n    exports[keys[i]] = util[keys[i]];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///891\n')}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](C,C.exports,__webpack_require__),C.exports}__webpack_require__.d=(g,I)=>{for(var C in I)__webpack_require__.o(I,C)&&!__webpack_require__.o(g,C)&&Object.defineProperty(g,C,{enumerable:!0,get:I[C]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(624);return __webpack_exports__})()}));